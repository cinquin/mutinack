set -e
set -o pipefail

#Compare JSONS in files whose paths are given by two arguments passed to the function
#If the contents differ, print a diff to stdout and save it to file "error"
#See http://stackoverflow.com/questions/31930041/using-jq-or-alternative-command-line-tools-to-diff-json-files/31935351
compare_jsons () {
  same=`./jq --argfile a $1 --argfile b $2 -n 'def post_recurse(f): def r: (f | select(. != null) | r), .; r; def post_recurse: post_recurse(.[]?); ($a | (post_recurse | arrays) |= sort) as $a | ($b| (post_recurse | arrays) |= sort) as $b | $a == $b'`
  [[ ${same} == "true" ]] || (echo "jq diff of $1 and $2" > error && (diff -u  <(./jq -S . $2 ) <(./jq -S . $1) | tee -a error) && false)
}

extract_json() {
  ./jq --slurp --raw-output "map(.samples) | .[] | map(.stats) | flatten $1 | map({name} + {candidates: .detections[\"$2\"]$3})" $4 > $5
}

extract_lots_of_stats() {
  ./jq --slurp --raw-output "map(.samples) | .[] | map(.stats) | flatten $1 | map({name} + {candidates: .detections[\"chrX:11,857,475\"].disagreements} + {nProcessedBases} + {nMateOutOfReach} + {nDuplexesWithStats} + {nDuplexesNoStats} + {phredAndLigSiteDistance} + {duplexTotalRecords} + {nRecordsNotInIntersection1} + {nRecordsNotInIntersection2} + {nTooLowMapQIntersect} + {nPosDuplex} + {nPosDuplexBothStrandsPresent} + {nReadMedianPhredBelowThreshold} + {nDuplexesTooMuchClipping} + {nPosDuplexTooFewReadsPerStrand1} + {nPosDuplexTooFewReadsPerStrand2} + {nPosDuplexTooFewReadsAboveQ2Phred} + {nPosDuplexWithTopBottomDuplexDisagreementNoWT} + {nPosDuplexWithTopBottomDuplexDisagreementNotASub} + {rawMismatchesQ1} + {vBarcodeMismatches1M} + {vBarcodeMismatches2M} + {vBarcodeMismatches3OrMore} + {rawDeletionsQ1} + {rawInsertionsQ1} + {rawMismatchesQ2} + {rawDeletionsQ2} + {rawInsertionsQ2} + {topBottomSubstDisagreementsQ2} + {topBottomDelDisagreementsQ2} + {alleleFrequencies} + {topBottomInsDisagreementsQ2} + {codingStrandSubstQ2} + {templateStrandSubstQ2} + {codingStrandDelQ2} + {templateStrandDelQ2} + {codingStrandInsQ2} + {templateStrandInsQ2} + {topBottomDisagreementsQ2TooHighCoverage} + {nPosDuplexCandidatesForDisagreementQ2} + {nPosDuplexCandidatesForDisagreementQ2TooHighCoverage} + {nPosDuplexQualityQ2OthersQ1Q2} + {nPosDuplexQualityQ2OthersQ1Q2CodingOrTemplate} + {nPosCandidatesForUniqueMutation} + {nPosExcluded} + {nRecordsProcessed} + {ignoredUnpairedReads} + {nRecordsInFile} + {nRecordsUnmapped} + {nRecordsBelowMappingQualityThreshold} + {disagreementMatesSameOrientation} + {nComplexDisagreementsQ2} + {nRecordsIgnoredBecauseSecondary} + {nPosIgnoredBecauseTooHighCoverage} + {nPosDuplexWithLackOfStrandConsensus1} + {nPosDuplexWithLackOfStrandConsensus2} + {nPosDuplexCompletePairOverlap} + {nPosUncovered} + {nQ2PromotionsBasedOnFractionReads} + {nPosQualityPoor} + {nPosQualityPoorA} + {nPosQualityPoorT} + {nPosQualityPoorG} + {nPosQualityPoorC} + {nConsensusQ1NotMet} + {nMedianPhredAtPositionTooLow} + {nFractionWrongPairsAtPositionTooHigh} + {nPosQualityQ1} + {nPosQualityQ2} + {nPosQualityQ2OthersQ1Q2} + {nBasesBelowPhredScore} + {nConstantBarcodeMissing} + {nConstantBarcodeDodgy} + {nConstantBarcodeDodgyNStrand} + {nReadsConstantBarcodeOK} + {nCandidateSubstitutionsConsidered} + {nCandidateSubstitutionsToA} + {nCandidateSubstitutionsToT} + {nCandidateSubstitutionsToG} + {nCandidateSubstitutionsToC} + {nNs} + {nCandidateInsertions} + {nCandidateDeletions} + {nCandidateSubstitutionsAfterLastNBases} + {nCandidateWildtypeAfterLastNBases} + {nCandidateSubstitutionsBeforeFirstNBases} + {nCandidateIndelAfterLastNBases} + {nCandidateIndelBeforeFirstNBases} + {nVariableBarcodeCandidateExaminations} + {nVariableBarcodeLeftEqual} + {nVariableBarcodeRightEqual} + {nVariableBarcodeMateDoesNotMatch} + {nVariableBarcodeMateMatches} + {nVariableBarcodeMatchAfterPositionCheck} + {nVariableBarcodesCloseMisses} + {nReadsInsertNoSize} + {nReadsPairRF} + {nReadsPairTandem} + {nReadsInsertSizeAboveMaximum} + {nReadsInsertSizeBelowMinimum} + {duplexGroupingDepth} + {duplexTotalRecords} + {rejectedIndelDistanceToLigationSite} + {rejectedSubstDistanceToLigationSite} + {wtRejectedDistanceToLigationSite} + {wtAcceptedBaseDistanceToLigationSite} + {singleAnalyzerQ2CandidateDistanceToLigationSite} + {crossAnalyzerQ2CandidateDistanceToLigationSite} + {disagMutConsensus} + {disagWtConsensus} + {substDisagDistanceToLigationSite} + {insDisagDistanceToLigationSite} + {delDisagDistanceToLigationSite} + {disagDelSize} + {Q2CandidateDistanceToLigationSiteN} + {wtQ2CandidateQ1Q2Coverage} + {wtQ2CandidateQ1Q2CoverageRepetitive} + {wtQ2CandidateQ1Q2CoverageNonRepetitive} + {mutantQ2CandidateQ1Q2Coverage} + {mutantQ2CandidateQ1Q2DCoverageRepetitive} + {mutantQ2CandidateQ1Q2DCoverageNonRepetitive} + {uniqueMutantQ2CandidateQ1Q2DCoverage} + {uniqueMutantQ2CandidateQ1Q2DCoverageRepetitive} + {uniqueMutantQ2CandidateQ1Q2DCoverageNonRepetitive} + {mappingQualityKeptRecords} + {mappingQualityAllRecords} + {averageReadPhredQuality0} + {averageReadPhredQuality1} + {medianReadPhredQuality} + {medianPositionPhredQuality} + {averageDuplexReferenceDisagreementRate} + {duplexinsertSize} + {duplexAverageNClipped} + {duplexInsert130_180averageNClipped} + {duplexInsert100_130AverageNClipped} + {disagreementOrientationProportions1} + {disagreementOrientationProportions2} + {rawDeletionLengthQ1} + {rawInsertionLengthQ1} + {rawDeletionLengthQ2} + {rawInsertionLengthQ2} + {nReadsAtPosQualityQ2OthersQ1Q2} + {nReadsAtPosWithSomeCandidateForQ2UniqueMutation} + {nQ1Q2AtPosQualityQ2OthersQ1Q2} + {nQ1Q2AtPosWithSomeCandidateForQ2UniqueMutation} + {Q1Q2DuplexCoverage} + {Q2DuplexCoverage} + {missingStrandsWhenNoUsableDuplex} + {strandCoverageImbalanceWhenNoUsableDuplex} + {copyNumberOfDuplexBottomStrands} + {copyNumberOfDuplexTopStrands} + {duplexCollisionProbability} + {duplexCollisionProbabilityAtQ2} + {duplexCollisionProbabilityWhen2Strands} + {duplexCollisionProbabilityAtDisag} + {duplexCollisionProbabilityLocalAvAtDisag} + {sameBarcodeButPositionMismatch})" $2 > $3
}
